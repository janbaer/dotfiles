[user]
  name = Jan Baer
  email = jan@janbaer.de

[alias]
  a = add
  aa = !git add -u && git add . && git status
  alias = "!sh -c '[ $# = 2 ] && git config --global alias.\"$1\" \"$2\" && exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && exit 1' -"
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'  
  amend = !git add -u && git add . && git commit --amend --no-edit -n
  b = branch
  ba = checkout -b
  ca = commit --amend
  chan = commit --amend --reset-author --no-edit
  c = commit -m
  cp = cherry-pick -xn
  co = checkout
  dt = difftool -y
  editconfig = config --global -e
  f = fetch -p
  ffs = flow feature start
  fff = flow feature finish -F
  ffr = flow feature rebase
  fft = flow feature track
  ffp = flow feature publish
  frf = flow release finish -Fmp
  find = "!f() { git log --graph --all --no-merges --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an> %C(green)%d %Creset' --grep=$1; }; f"
  finda = "!f() { git log --graph --all --no-merges --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an> %C(green)%d %Creset'  --author=$1; }; f"
  df = diff --color --color-words --abbrev
  gs = "!f() { git grep --heading --color -I -n -e $1; }; f"
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
  lga = log --oneline --graph --all
  lge = log --graph --all --format=email
  last = log -1 HEAD
  ls1 = log --oneline --stat -1
  ls = "!f() { n=10; [ -n \"$1\" ] && n=$1; git log --oneline --graph --stat -$n; }; f"
  l = "!f() { n=10; [ -n \"$1\" ] && n=$1; git log --oneline --graph -$n; }; f"
  m = merge --no-commit
  mt = mergetool -y
  p = pull
  pp = !git pull && git push
  pom = push origin master
  psom = push origin master
  plom = pull origin master
  rblh = reset --hard HEAD^
  rbls = reset --soft HEAD^
  rb = reset --soft HEAD^
  ri = rebase -i
  rin = "!f() { n=2; [ -n \"$1\" ] && n=$1; git rebase -i HEAD~$n; }; f"
  rn = rebase --continue
  rq = rebase --abort
  remotes = remote -v show
  s = status -s
  save = !git aa && git commit -n -m
  showfiles = diff-tree --no-commit-id --name-only -r
  tree = log --graph --simplify-by-decoration --pretty=format:'%d' --all
  unstage = reset head --
  undo = checkout --
  undolastcommit = reset --hard HEAD~1
  undopush = git push -f origin HEAD^:master
  undoall = reset --hard
  up = pull
  whereis = "!f() { git branch -r --contains $1; }; f"

[color]
  ui = always

[core]
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[merge]
  log = true
  tool = kdiff3

[diff]
  tool = kdiff3

[difftool "kdiff3"]
  path = /Applications/kdiff3.app/Contents/MacOS/kdiff3
  trustExitCode = false

[difftool "sourcetree"]
  cmd = opendiff \"$LOCAL\" \"$REMOTE\"
  path =

[mergetool "kdiff3"]
  path = /Applications/kdiff3.app/Contents/MacOS/kdiff3
  trustExitCode = false
  keepBackup = false

[mergetool "sourcetree"]
  cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
  trustExitCode = true
  keepBackup = false

[push]
  default = tracking
[pull]
  rebase = true


