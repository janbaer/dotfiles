snippet clog
	console.log(${1});${2}
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {${4:}
	};
# Function
snippet func
	function${1}(${2}) {${4:}
	}${3}
# if
snippet if
	if (${1:true}) {${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
	  ${2}
	} else {
	  ${3}
	}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
	  case '${3:case}':
		${4:// code}
	  	break;
	  ${5}
	  default:
	  	${2:// code}
	}
# case
snippet case
	case '${1:case}':
	  ${2:// code}
	  break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
	  ${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
	  ${4:$1[$2]}
	}
# for of (...) {...}
snippet foro
	for (const ${1} of ${2}) {
	  ${3}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
	  ${2:/* code */}
	}
# do...while
snippet do
	do {
	  ${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
	  ${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
snippet gett
	getElementBy${1:Id}('${2}')${3}
snippet desc
	describe('${1}', () => {${2}
	});
snippet when
	describe('When ${1}', () => {${2}
	});
snippet and
	describe('and ${1}', () => {${2}
	});
snippet before
	beforeEach(() => {${1}
	});
snippet it
	it('Should ${1}', () => {${2}
	});
snippet strict
	'use strict';${1}
snippet etb
	expect(${1}).${2}toBe(${3});${4}
snippet ee
	expect(${1}).${2}toEqual(${3});${4}
snippet etbd
	expect(${1}).${2}toBeDefined();${3}
snippet ctor
	constructor(${1}) {${2}
	}
snippet require
	const ${1} = require('${2}');${3}
snippet component
	import { Component } from '@angular/core';
	import template from './${1}.tpl.html';
	
	@Component({
	  selector: '${2}',
	  template: template,
	  directives: []
	})
	export class ${3} {
	  constructor(${4}) {${5}
	  }
	}
snippet import
	import { ${1} } from '${2}';
snippet gulptask
	gulp.task('${1}', () => {
	${2}
	});
snippet hashbang
	#!/usr/bin/env node
