snippet assignment_tag "Django assignment_tag"
@register.assignment_tag
def $1():
    return ''
endsnippet


snippet dispatch "Dispatch method for a Django view"
@method_decorator(login_required)
def dispatch(self, request, *args, **kwargs):
    return super($1, self).dispatch(
        request, *args, **kwargs)
endsnippet


snippet get "get method for a Django view"
def get(self, request, *args, **kwargs):
    return super($1, self).get(request, *args, **kwargs)
endsnippet


snippet get_context_data "get_context_data method for a Django view"
def get_context_data(self, **kwargs):
    ctx = super($1, self).get_context_data(**kwargs)
    ctx.update({
        $2
    })
    return ctx
endsnippet


snippet get_object "get_object method for a Django view"
def get_object(self, queryset=None):
    return self.model.objects.all()[0]
endsnippet


snippet post "post method for a Django view"
def post(self, request, *args, **kwargs):
    return super($1, self).post(request, *args, **kwargs)
endsnippet


snippet setUp "setUp method for a Django view test"
def setUp(self):
    super($1, self).setUp()
endsnippet


snippet testCase "A new Django test case"
class $1TestCase(TestCase):
    """Tests for the \`\`$1\`\`."""
    longMessage = True
endsnippet


snippet view "A new Django view"
class $1(View):
    """TODO: Docstring."""

    @method_decorator(login_required)
    def dispatch(self, request, *args, **kwargs):
        return super($1, self).dispatch(
            request, *args, **kwargs)
endsnippet
