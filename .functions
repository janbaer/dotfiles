foldersToExclude='.git\|.vscode\|node_modules\|bower\|logs\|generated\|dist\|build\|.DS_Store'

# Create a new directory and enter it
function mkdircd() {
  mkdir -p "$@" && cd "$@"
}

function rd() {
  rm -r -f -d "$1"
}

# find shorthand
function f() {
  find . -name "$1"
}

# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}


# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
  mkdir -p "$1"
  git archive master | tar -x -C "$1"
}

# get gzipped size
function gz() {
  echo "orig size    (bytes): "
  cat "$1" | wc -c
  echo "gzipped size (bytes): "
  gzip -c "$1" | wc -c
}

# All the dig info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
  echo # newline
}


# Extract archives - use: extract <file>
# Credits to http://dotfiles.org/~pseup/.bashrc
function extract() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2) tar xjf $1 ;;
      *.tar.gz) tar xzf $1 ;;
      *.bz2) bunzip2 $1 ;;
      *.rar) rar x $1 ;;
      *.gz) gunzip $1 ;;
      *.tar) tar xf $1 ;;
      *.tbz2) tar xjf $1 ;;
      *.tgz) tar xzf $1 ;;
      *.zip) unzip $1 ;;
      *.Z) uncompress $1 ;;
      *.7z) 7z x $1 ;;
      *) echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

function findin() {
  find $1 -exec grep -i --color $2 {} \; -print
}

function findandremove() {
  find -E . -regex $1 -exec rm -rf {} \;
}

function findmp3andremove() {
  find -E . -regex '^.+\([0-9]+\).mp3$' -exec rm -rf {} \;
}

function get-nodejs-version() {
  curl -s https://nodejs.org/en/ | grep "Current$" | awk '{ print substr($1,0,8) }'
}

function npmlsg() {
  npm ls -g --depth=0
}

function install-global-npms() {
  npm install -g live-server typescript jsctags prettier npm-which google-translate-cli npm-check npkill neovim tree-sitter tree-sitter-cli
}

function combine_mp3() {
  cat *.mp3 > ../all.mp3
  avconv -i ../all.mp3 -acodec copy $1.mp3
  rm -f ../all.mp3
}

function combine_recursive_mp3() {
  find -ds . -name '*.mp3' -print0 | xargs -0 cat >> ../all.mp3
  avconv -i ../all.mp3 -acodec copy $1.mp3
  rm -f ../all.mp3
}

function free() {
  top -l 1 | head -n 10 | grep PhysMem
}

function topByCpu() {
  top -o %CPU
}

function dirSize() {
  du -hsx * | sort -r | head -6
}

function watchTests() {
  export PATH=$PATH:"/Library/Frameworks/Python.framework/Versions/3.5/bin"

  nosetests --with-mocha-reporter --with-watch -s .
}

function git-purge() {
  git fetch -p | git branch --color=never --merged | grep -v "\*" | grep -v "master" | grep -v "develop" | xargs -n 1 git branch -d
}

function gdiff() {
  vim $1 +Gdiff
}

function findCode() {
  ack "$1" -i --column --ignore-dir=node_modules --ignore-dir=jspm_packages --ignore-dir=bower_components --ignore-dir=dist $2
}

function createCTags() {
  $(which ctags) -R --options=$HOME/.ctagsoptions
}

function createJSCTags() {
  # You have to install 'npm install -g jsctags' to use this command
  find . -type f -iregex ".*\.js$" -not -path "./node_modules/*" -not -path ".*/bundle.js" -not -path ".*/*vendor.js" -exec jsctags {} -f \; | sed '/^$/d' | sort > tags
}

function removeOrigFiles() {
  find . -iname '*.orig' -exec rm '{}' ';'
}

# Some aliase to use fzf with git
function gco() {
  git checkout $(git branch --color=never | sort | fzf )
}

function gcor() {
  local REMOTE_BRANCHES=$(git b -r --color=never | grep -vE "$(git b --color=never | sed ':a;N;$!ba;s/\n/|/g' | sed 's/ //g')" | sed 's/origin\///g')
  if [ -z $REMOTE_BRANCHES ]; then
    echo "There are no remote branches or you have all remote branches checked out locally.."
  else
    git checkout $(echo $REMOTE_BRANCHES | sort | fzf)
  fi
}

function vimf() {
  vim -O $(fzf -m --preview 'head -150 {} | pygmentize -O style=monokai' | tr '\n' ' ')
}

function nf() {
  nvim -O $(fzf -m --preview 'head -150 {} | pygmentize -O style=monokai' | tr '\n' ' ')
}

function cdf() {
  dir=$(find . -maxdepth 1 -type d | grep -v $foldersToExclude | sort | fzf --preview 'exa --long --header --git --all --color=always {}') && cd "$dir"
}

function cdr() {
  dir=$(find . -type d | grep -v $foldersToExclude | sort | fzf) && cd "$dir"
}

function weather() {
  local location="${1:-Munich}"
  curl -4 http://wttr.in/$location
}

function docker-python() {
  docker run -it --rm  -v "$(pwd)":/home/src janbaer/python3
}

function docker-nodejs() {
  docker run -it --rm  -v "$(pwd)":/home/src janbaer/nodejs
}

function docker-go() {
  local app="${1:-app}"
  docker run -it --rm  -v "$(pwd)":/go/src/github.com/janbaer/$app janbaer/go
}

function docker-vim() {
  docker run -it --rm                       \
             -v "$(pwd)":/home/jan/projects \
             janbaer/vim $1
}

alias dvim=docker-vim

function vim-go() {
  docker run -it --rm                       \
             -v "$(pwd)":/home/jan/projects \
             janbaer/vim-go $1
}

function vim-clear-undo() {
  VIM_UNDO_DIR=~/.vim/undo
  if [ -d $VIM_UNDO_DIR ] ; then
    rm -rf $VIM_UNDO_DIR
  fi
  mkdir -p $VIM_UNDO_DIR
}

alias clear-undo=vim-clear-undo

function docker-rmi-all() {
  docker rmi -f $(docker images -a -q)
}

function docker-rmi-all-untagged() {
  docker rmi -f $(docker images | grep "<none>" | awk "{print \$3}")
}

function docker-rm-all() {
  docker rm $(docker ps -a -q)
}

function docker-rm-all-stopped() {
  docker rm $(docker ps -a | grep Exited | grep -v busybox | awk "{print \$1}")
}

function mocha-run() {
  searchPattern=${1:-./**/*.spec.js}
  mocha '${searchPattern}' --recursive --reporter spec
}

function mocha-watch() {
  searchPattern=${1:-./**/*.spec.js}
  mocha '${searchPattern}' --recursive --reporter spec --watch
}

function latex() {
  docker run --name latex --rm -it -v $(pwd):/tmp -w /tmp janbaer/latex xelatex -interaction=nonstopmode "$@"
  if [ $? -eq 0 ]; then
    rm -f *.{log,aux,toc}
  fi
}

function latex-watch() {
  while inotifywait -e close_write $1; do latex $1; done
}

function alpine() {
  docker run -it --rm -u root -v $(pwd):/tmp -w /tmp alpine:latest
}

function setwal() {
  wal -i ${HOME}/Pictures/Wallpapers -o wal-set
}

function chrome() {
  cd ~/Projects/github/chromium-latest-linux
  ./run.sh
  cd -
}

function man() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
            man "$@"
}

function who-is-using-port() {
  local PORT=$1
  lsof -n -i:$PORT | grep -i listen
}

function free-port() {
  local PORT=$1
  kill -9 $(lsof -t -i :$PORT)
}

function install-go() {
  local VERSION=$1
  if [ -z "$VERSION" ]; then
    echo "You have to pass the version of Go you want to install!"
    return
  fi

  local ARCHIVE_NAME=go${VERSION}.linux-amd64.tar.gz

  if [ -d /usr/local/go ]; then
    echo "Removing previously installed version of Go"
    sudo rm -rf /usr/local/go
  fi

  cd ~/Downloads

  echo "Begin downloading archive for Go ${VERSION}"
  wget https://dl.google.com/go/${ARCHIVE_NAME}

  echo "Extracting archive now and installing Go ${VERSION}"
  sudo tar -C /usr/local -xzf go$VERSION.linux-amd64.tar.gz

  rm -f ${ARCHIVE_NAME}

  cd -

  echo "$(go version) is now running on you machine"
}

function rename-files() {
  local prefix=$1
  if [ -z "$prefix" ]; then
    echo "You have to call the function in the following way rename-files images-from-2020-04-06 jpg. The extension is optional, default is jpg"
    return
  fi

  local extension=${2:-jpg}

  \ls -t -r | cat -n | while read n f; do mv "${f}" "${prefix}-$(printf "%02d" $n).${extension}"; done
}

# cht.sh - The only cheatsheet you need
function cheat() {
  curl cht.sh/$1
}

function mongo-docker() {
  local port=${1:-27017}
  local version=${2:-latest}

  local name="mongo-${port}-${version}"
  docker run -it --rm --name ${name} -v "$(pwd)/data":/data/db -p ${port}:27017 mongo:${version}
}

function docker-ubuntu() {
  local version=${1:-focal}
  local name="ubuntu-${version}"
  docker run -it --rm --name ${name} -v "$(pwd)":/tmp/ubuntu ubuntu:${version}
}

# Integration of fzf in Tmux
function tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

function jupyter() {
  mkdir -p ~/Projects/jupyter-notebooks
  cd ~/Projects/jupyter-notebooks
  docker run --name jupyter --rm -p 8888:8888 -v "$(pwd):/home/jovyan" jupyter/scipy-notebook:ubuntu-22.04
}

function cheat() {
  local topic=$1
  if [[ -z $topic ]]; then
    echo "You need to specify a topic to search for"
    exit 1
  fi

  http "cht.sh/$1" | bat
}
