foldersToExclude='.git\|.vscode\|node_modules\|bower\|logs\|generated\|dist\|build\|.DS_Store'

# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}

function rd() {
  rm -r -f -d "$1"
}

# find shorthand
function f() {
  find . -name "$1"
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}

# lets toss an image onto my server and pbcopy that bitch.
function scpp() {
  scp "$1" aurgasm@aurgasm.us:~/paulirish.com/i;
  echo "http://paulirish.com/i/$1" | pbcopy;
  echo "Copied to clipboard: http://paulirish.com/i/$1"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

function nodedebug() {
  local port="${2:-8080}"
  open "http://localhost:${port}/debug?port=5858"
  nodemon --harmony --debug $1 $port
}


# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}


# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
  encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
function json() {
  if [ -p /dev/stdin ]; then
    # piping, e.g. `echo '{"foo":42}' | json`
    python -mjson.tool | pygmentize -l javascript
  else
    # e.g. `json '{"foo":42}'`
    python -mjson.tool <<< "$*" | pygmentize -l javascript
  fi
}


# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
  mkdir -p "$1"
  git archive master | tar -x -C "$1"
}

# get gzipped size
function gz() {
  echo "orig size    (bytes): "
  cat "$1" | wc -c
  echo "gzipped size (bytes): "
  gzip -c "$1" | wc -c
}

# All the dig info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
  echo # newline
}


# Extract archives - use: extract <file>
# Credits to http://dotfiles.org/~pseup/.bashrc
function extract() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2) tar xjf $1 ;;
      *.tar.gz) tar xzf $1 ;;
      *.bz2) bunzip2 $1 ;;
      *.rar) rar x $1 ;;
      *.gz) gunzip $1 ;;
      *.tar) tar xf $1 ;;
      *.tbz2) tar xjf $1 ;;
      *.tgz) tar xzf $1 ;;
      *.zip) unzip $1 ;;
      *.Z) uncompress $1 ;;
      *.7z) 7z x $1 ;;
      *) echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# call the node js project to pull automatically the latest version for all defined git repositories
function gs() {
  pushd /Users/jan/Projects/NodeProjects/gitsync

  ./gs.sh

  popd
}

function findin() {
  find $1 -exec grep -i --color $2 {} \; -print
}

function findandremove() {
  find -E . -regex $1 -exec rm -rf {} \;
}

function findmp3andremove() {
  find -E . -regex '^.+\([0-9]+\).mp3$' -exec rm -rf {} \;
}

function get-nodejs-version() {
  curl -s https://nodejs.org/en/ | grep "Current Version" | awk '{ print substr($4,0,8) }'
}

function get-iojs-version() {
  curl -s https://iojs.org/en/index.html | grep "Version" | awk '{ print substr($3,0,5) }'
}

function npmlsg() {
  npm ls -g --depth=0
}

function install-global-npms() {
  npm install -g babel babel-eslint bower eslint gulp-cli growl grunt-cli karma-cli mocha live-server nodemon yo typescript tslint webpack
}

function clip() {
  cat $1 | pbcopy
}

function combine_mp3() {
  cat *.mp3 > ../all.mp3
  avconv -i ../all.mp3 -acodec copy $1.mp3
  rm -f ../all.mp3
}

function combine_recursive_mp3() {
  find -ds . -name '*.mp3' -print0 | xargs -0 cat >> ../all.mp3
  avconv -i ../all.mp3 -acodec copy $1.mp3
  rm -f ../all.mp3
}

function coreos() {
  cd '/Volumes/Macintosh HD 2/VMWare/'
  ./runCoreOS.sh
}

function free() {
  top -l 1 | head -n 10 | grep PhysMem
}

function topByCpu() {
  top -o cpu
}

function dirSize() {
  du -hsx * | sort -r | head -6
}

function watchTests() {
  export PATH=$PATH:"/Library/Frameworks/Python.framework/Versions/3.5/bin"

  nosetests --with-mocha-reporter --with-watch -s .
}

function git-purge() {
  git fetch -p | git branch --color=never --merged | grep -v "\*" | grep -v "master" | grep -v "develop" | xargs -n 1 git branch -d
}

function gdiff() {
  vim $1 +Gdiff
}

function turnAppleKeyRepeatOff() {
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
}

function turnAppleKeyRepeatOn() {
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool true
}

function findCode() {
  ack "$1" -i --column --ignore-dir=node_modules --ignore-dir=jspm_packages --ignore-dir=bower_components --ignore-dir=dist $2
}

function createCTags() {
  /usr/local/bin/ctags -R --options=$HOME/.ctagsoptions
}

function removeOrigFiles() {
  find . -iname '*.orig' -exec rm '{}' ';'
}

# Some aliase to use fzf with git
function gco() {
  git checkout $(git branch --color=never | sort | fzf )
}

function gfft() {
  branch=$(git-remote-features | fzf ) || return
  git fft $branch
}

function gffp() {
  branch=$(git-local-features | fzf ) || return
  git ffp $branch
}

function vimf() {
  file=$(find . | grep -v $foldersToExclude | fzf) && vim "$file"
}

function cdf() {
  dir=$(find . -type d | grep -v $foldersToExclude | fzf) && cd "$dir"
}

function weather() {
  local location="${1:-Munich}"
  curl -4 http://wttr.in/$location
}

function docker-python() {
  docker run -it --rm  -v "$(pwd)":/home/src janbaer/python3
}

function docker-nodejs() {
  docker run -it --rm  -v "$(pwd)":/home/src janbaer/nodejs
}

function docker-go() {
  local app="${1:-app}"
  docker run -it --rm  -v "$(pwd)":/go/src/github.com/janbaer/$app janbaer/go
}

function docker-rmi-all() {
  docker rmi -f $(docker images -a -q)
}

function docker-rmi-all-untagged() {
  docker rmi -f $(docker images | grep "<none>" | awk "{print \$3}")
}

function docker-rm-all() {
  docker rm $(docker ps -a -q)
}

function docker-rm-all-stopped() {
  docker rm $(docker ps -a | grep Exited | grep -v busybox | awk "{print \$1}")
}

function docker-clean() {
  pushd
  # remove untagged images
  docker rmi $(docker images | grep none | awk '{ print $3}')
  # remove unused volumes
  docker volume rm $(docker volume ls -q )
  # `shotgun` remove unused networks
  docker network rm $(docker network ls | grep "_default")
  # remove stopped + exited containers, I skip Exit 0 as I have old scripts using data containers.
  docker rm -v $(docker ps -a | grep "Exit [1-255]" | awk '{ print $1 }')
  # shrink the docker volume file
  cd ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux
  /Applications/Docker.app/Contents/MacOS/qemu-img convert -O qcow2 Docker.qcow2 Docker2.qcow2
  mv -f Docker2.qcow2 Docker.qcow2

  popd
}

function mocha-run() {
  searchPattern=${1:-./**/*.spec.js}
  mocha ${searchPattern} --recursive --reporter spec
}

function mocha-watch() {
  searchPattern=${1:-./**/*.spec.js}
  mocha ${searchPattern} --recursive --reporter spec --watch
}

