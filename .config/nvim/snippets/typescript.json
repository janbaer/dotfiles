{
  "console.log": {
    "prefix": "clog",
    "body": [
      "console.log(${1});${2}"
    ]
  },
  "console.table": {
    "prefix": "ctab",
    "body": [
      "console.table(${1});${2}"
    ]
  },
  "function": {
    "prefix": "func",
    "body": [
      "function ${1}(${2}) {${4:}",
      "}"
    ]
  },
  "if statement": {
    "prefix": "if",
    "body": [
      "if (${1:true}) {${2}",
      "}"
    ]
  },
  "if else statement": {
    "prefix": "ife",
    "body": [
      "if (${1:true}) {",
      "  ${2}",
      "} else {",
      "  ${3}",
      "}"
    ]
  },
  "ternary operator": {
    "prefix": "t",
    "body": [
      "${1:/* condition */} ? ${2:a} : ${3:b}"
    ]
  },
  "switch statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:expression}) {",
      "  case '${3:case}':",
      "    ${4:// code}",
      "    break;",
      "  ${5}",
      "  default:",
      "    ${2:// code}",
      "}"
    ]
  },
  "case statement": {
    "prefix": "case",
    "body": [
      "case '${1:case}':",
      "  ${2:// code}",
      "  break;",
      "${3}"
    ]
  },
  "for loop": {
    "prefix": "for",
    "body": [
      "for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {",
      "  ${4:$1[$2]}",
      "}"
    ]
  },
  "for loop reversed": {
    "prefix": "forr",
    "body": [
      "for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {",
      "  ${4:$1[$2]}",
      "}"
    ]
  },
  "for of loop": {
    "prefix": "foro",
    "body": [
      "for (const ${1} of ${2}) {",
      "  ${3}",
      "}"
    ]
  },
  "while loop": {
    "prefix": "wh",
    "body": [
      "while (${1:/* condition */}) {",
      "  ${2:/* code */}",
      "}"
    ]
  },
  "do while loop": {
    "prefix": "do",
    "body": [
      "do {",
      "  ${2:/* code */}",
      "} while (${1:/* condition */});"
    ]
  },
  "object method": {
    "prefix": ":f",
    "body": [
      "${1:method_name}: function(${2:attribute}) {",
      "  ${4}",
      "}${3:,}"
    ]
  },
  "setTimeout": {
    "prefix": "timeout",
    "body": [
      "setTimeout(function() {${3}}${2}, ${1:10};"
    ]
  },
  "getElementsByTagName": {
    "prefix": "get",
    "body": [
      "getElementsBy${1:TagName}('${2}')${3}"
    ]
  },
  "getElementById": {
    "prefix": "gett",
    "body": [
      "getElementBy${1:Id}('${2}')${3}"
    ]
  },
  "describe": {
    "prefix": "desc",
    "body": [
      "describe('${1}', () => {${2}",
      "});"
    ]
  },
  "spec": {
    "prefix": "spec",
    "body": [
      "describe('${1} spec', () => {${2}",
      "});"
    ]
  },
  "when": {
    "prefix": "when",
    "body": [
      "describe('When ${1}', () => {${2}",
      "});"
    ]
  },
  "and": {
    "prefix": "and",
    "body": [
      "describe('and ${1}', () => {${2}",
      "});"
    ]
  },
  "beforeEach": {
    "prefix": "before",
    "body": [
      "beforeEach(() => {${1}",
      "});"
    ]
  },
  "beforeEach async": {
    "prefix": "beforea",
    "body": [
      "beforeEach(async () => {${1}",
      "});"
    ]
  },
  "afterEach": {
    "prefix": "after",
    "body": [
      "afterEach(() => {",
      "  $0",
      "});"
    ],
    "description": "after each (js)"
  },
  "it": {
    "prefix": "it",
    "body": [
      "it('Should ${1}', () => {${2}",
      "});"
    ]
  },
  "use strict": {
    "prefix": "strict",
    "body": [
      "'use strict';${1}"
    ]
  },
  "expect toBe": {
    "prefix": "etb",
    "body": [
      "expect(${1}).${2}toBe(${3});${4}"
    ]
  },
  "expect toEqual": {
    "prefix": "ee",
    "body": [
      "expect(${1}).${2}toEqual(${3});${4}"
    ]
  },
  "expect toBeDefined": {
    "prefix": "etbd",
    "body": [
      "expect(${1}).${2}toBeDefined();${3}"
    ]
  },
  "expect toHaveBeenCalled": {
    "prefix": "etbc",
    "body": [
      "expect(${1}).toHaveBeenCalled();${2}"
    ]
  },
  "expect not toHaveBeenCalled": {
    "prefix": "entbc",
    "body": [
      "expect(${1}).not.toHaveBeenCalled();${2}"
    ]
  },
  "expect toHaveBeenCalledWith": {
    "prefix": "etbcw",
    "body": [
      "expect(${1}).toHaveBeenCalledWith(${2});${3}"
    ]
  },
  "constructor": {
    "prefix": "ctor",
    "body": [
      "constructor(${1}) {${2}",
      "}"
    ]
  },
  "mockResolvedValue": {
    "prefix": "mrv",
    "body": [
      "jest.fn().mockResolvedValue(${1})"
    ]
  },
  "spyOn": {
    "prefix": "spo",
    "body": [
      "jest.spyOn(${1}, '${2}').mockResolvedValue(${3})"
    ]
  },
  "require": {
    "prefix": "require",
    "body": [
      "const ${1} = require('${2}');${3}"
    ]
  },
  "Angular component": {
    "prefix": "component",
    "body": [
      "import { Component } from '@angular/core';",
      "import template from './${1}.tpl.html';",
      "",
      "@Component({",
      "  selector: '${2}',",
      "  template: template,",
      "  directives: []",
      "})",
      "export class ${3} {",
      "  constructor(${4}) {${5}",
      "  }",
      "}"
    ]
  },
  "import": {
    "prefix": "import",
    "body": [
      "import ${1} from '${2}';${3}"
    ]
  },
  "gulp task": {
    "prefix": "gulptask",
    "body": [
      "gulp.task('${1}', () => {",
      "${2}",
      "});"
    ]
  },
  "hashbang": {
    "prefix": "hashbang",
    "body": [
      "#!/usr/bin/env node"
    ]
  },
  "React component": {
    "prefix": "react",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "",
      "export default class ${1} extends React.Component {${2}",
      "  static propTypes = {",
      "    name: PropTypes.string.isRequired",
      "  };",
      "",
      "  constructor(props) {",
      "    super(props);",
      "    this.state = {",
      "    };",
      "  }",
      "",
      "  componentDidMount() {",
      "  }",
      "",
      "  componentWillMount() {",
      "  }",
      "",
      "  componentWillUnmount() {",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <div></div>",
      "    );",
      "  }",
      "}"
    ]
  },
  "React functional component": {
    "prefix": "react-func",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "",
      "const ${1:NAME} = ({ ${2} }) => {",
      "  return (",
      "    ${3:<div />}",
      "  );",
      "};",
      "",
      "$1.propTypes = {",
      "};",
      "",
      "export default $1;"
    ]
  },
  "className": {
    "prefix": "cn",
    "body": [
      "className=\"${1}\"${2}"
    ]
  },
  "no-console": {
    "prefix": "noconsole",
    "body": [
      "// eslint-disable-line no-console"
    ]
  },
  "eslint-disable-line": {
    "prefix": "edl",
    "body": [
      "// eslint-disable-line"
    ]
  },
  "try catch": {
    "prefix": "try",
    "body": [
      "try {",
      "  ${1}",
      "} catch (err) {",
      "  ${2:console.error('Unexpected error while...', err)};",
      "}"
    ]
  },
  "const": {
    "prefix": "const",
    "body": [
      "const ${1} = ${2};"
    ]
  },
  "module.exports": {
    "prefix": "mex",
    "body": [
      "module.exports = ${1};"
    ]
  },
  "style jsx": {
    "prefix": "style-jsx",
    "body": [
      "<style jsx> {\`${1}",
      "\`}",
      "</style>"
    ]
  },
  "render": {
    "prefix": "render",
    "body": [
      "render${1}(${2}) {",
      "  return (${3}",
      "  );",
      "}"
    ]
  },
  "Preact component": {
    "prefix": "preact",
    "body": [
      "import { h, Component } from 'preact';",
      "",
      "export default class ${1} extends Component {${2}",
      "  constructor(props) {",
      "    super(props);",
      "    this.state = {",
      "    };",
      "  }",
      "",
      "  componentDidMount() {${3}",
      "  }",
      "",
      "  render(props, state) {",
      "    return (",
      "      <div></div>",
      "    );",
      "  }",
      "}"
    ]
  },
  "Preact functional component": {
    "prefix": "preact-func",
    "body": [
      "import { h } from 'preact';",
      "",
      "const ${1:NAME} = ({ ${2} }) => {",
      "  return (",
      "    ${3:<div />}",
      "  );",
      "};",
      "",
      "export default $1;"
    ]
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": [
      "componentDidMount() {${1}",
      "}"
    ]
  },
  "React Fragment": {
    "prefix": "frag",
    "body": [
      "<React.Fragment>${1}</React.Fragment>"
    ]
  },
  "Jest test cases": {
    "prefix": "testCases",
    "body": [
      "describe('${1} spec', () => {",
      "  const testCases = [",
      "    [${2}],",
      "  ];",
      "",
      "  test.each(testCases)('${3}', (${4}) => {${5}",
      "  });",
      "});"
    ]
  }
}